def find_neighbors(i, j, grid, neighbors, checked):
    try:
        if grid[i + 1][j] == '1' and (i + 1, j) not in checked:
            neighbors += [(i + 1, j)]
            checked[(i + 1, j)] = 1
    except IndexError:
        pass

    try:
        if grid[i][j + 1] == '1' and (i, j + 1) not in checked:
            neighbors += [(i, j + 1)]
            checked[(i, j+1)] = 1

    except IndexError:
        pass
    try:
        if grid[i][j - 1] == '1' and (i, j - 1) not in checked and j - 1 >= 0:
            neighbors += [(i, j - 1)]
            checked[(i, j-1)] = 1

    except IndexError:
        pass
    try:
        if grid[i - 1][j] == '1' and (i - 1, j) not in checked and i - 1 >= 0:
            neighbors += [(i - 1, j)]
            checked[(i -1, j)] = 1

    except IndexError:
        pass
    return neighbors, checked


def numIslands(grid):
    checked = {}
    isls = 0
    for i, x in enumerate(grid):
        for j, y in enumerate(x):
            if (i, j) not in checked:
                checked[(i, j)] = 1
                if grid[i][j] == '1':
                    isls += 1
                    neighbors = []
                    neighbors, checked = find_neighbors(i, j, grid, neighbors, checked)
                    while neighbors:
                        # print(len(neighbors))
                        n = neighbors[0]
                        neighbors = neighbors[1:]
                        checked[(n[0], n[1])] = 1
                        neighbors, checked = find_neighbors(n[0], n[1], grid, neighbors, checked)
    return isls


print(numIslands(
    [["1", "1", "1", "1", "0"], ["1", "1", "0", "1", "0"], ["1", "1", "0", "0", "0"], ["0", "0", "0", "0", "0"]]))

print(numIslands([["1", "1", "1"], ["0", "1", "0"], ["1", "1", "1"]]))


print(numIslands([["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "0", "1", "1"],
                  ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "0"],
                  ["1", "0", "1", "1", "1", "0", "0", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "0", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1"],
                  ["0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "0", "1", "1", "1", "1"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1"],
                  ["1", "0", "1", "1", "1", "1", "1", "0", "1", "1", "1", "0", "1", "1", "1", "1", "0", "1", "1", "1"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "1", "1", "0"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "0", "1", "1", "1", "1", "0", "0"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
                  ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1",
                   "1"]]))
